package com.example.questapplication;

import android.app.DatePickerDialog;
import android.os.Bundle;
import android.text.TextUtils;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.Toast;

import androidx.annotation.Nullable;
import androidx.appcompat.app.AppCompatActivity;
import androidx.appcompat.widget.Toolbar;
import androidx.core.content.ContextCompat;

import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.auth.FirebaseUser;
import com.google.firebase.database.FirebaseDatabase;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.nio.charset.StandardCharsets;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.Locale;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class CreateGoalActivity extends AppCompatActivity {

    private static final String TAG = "CreateGoalActivity";

    // ---- UI ----
    private EditText goalTitleInput, goalDeadlineInput;
    private LinearLayout taskInputContainer;

    private Button addTaskButton, btnCreateGoal, btnCancelGoal;

    // AI UI
    private EditText aiIdeaInput;           // "Tell me your goal"
    private Button btnDevisePlan;           // Devise a plan
    private LinearLayout aiLoadingRow;      // tiny progress row
    private EditText aiAdjustInput;         // "Tell me how to adjust"
    private Button btnApplyAdjustment;      // Suggest changes
    private LinearLayout aiAdjustRow;       // container for adjust (hidden initially)

    // ---- Networking (Gen-2 Cloud Run URLs) ----
    private static final String URL_DEVISE = "https://ai-devise-plan-sy2jevgguq-ew.a.run.app";
    private static final String URL_ADJUST = "https://ai-adjust-plan-sy2jevgguq-ew.a.run.app";

    private final ExecutorService networkExecutor = Executors.newSingleThreadExecutor();

    @Override
    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_create_goal);

        // Toolbar
        Toolbar toolbar = findViewById(R.id.toolbarCreateGoal);
        setSupportActionBar(toolbar);
        if (getSupportActionBar() != null) {
            getSupportActionBar().setTitle("Create a Goal");
            getSupportActionBar().setDisplayHomeAsUpEnabled(true);
        }
        toolbar.setNavigationOnClickListener(v -> finish());

        // Bind core UI
        goalTitleInput = findViewById(R.id.goalTitleInput);
        goalDeadlineInput = findViewById(R.id.goalDeadlineInput);
        taskInputContainer = findViewById(R.id.taskInputContainer);
        addTaskButton = findViewById(R.id.addTaskButton);
        btnCreateGoal = findViewById(R.id.btnCreateGoal);
        btnCancelGoal = findViewById(R.id.btnCancelGoal);

        // AI UI
        aiIdeaInput = findViewById(R.id.aiIdeaInput);
        btnDevisePlan = findViewById(R.id.btnDevisePlan);
        aiLoadingRow = findViewById(R.id.aiLoadingRow);
        aiAdjustInput = findViewById(R.id.aiAdjustInput);
        btnApplyAdjustment = findViewById(R.id.btnApplyAdjustment);
        aiAdjustRow = findViewById(R.id.aiAdjustRow);

        // Listeners
        goalDeadlineInput.setOnClickListener(v -> openDatePicker());
        addTaskButton.setOnClickListener(v -> addTaskField(null));
        btnCreateGoal.setOnClickListener(v -> createGoal());
        btnCancelGoal.setOnClickListener(v -> finish());

        // AI listeners
        btnDevisePlan.setOnClickListener(v -> handleDevisePlan());
        btnApplyAdjustment.setOnClickListener(v -> handleApplyAdjustment());

        // First blank task field
        addTaskField(null);
    }

    // ---------------- Date Picker ----------------
    private void openDatePicker() {
        Calendar calendar = Calendar.getInstance();
        DatePickerDialog dialog = new DatePickerDialog(this, (view, year, month, dayOfMonth) -> {
            String formattedDate = String.format(Locale.getDefault(), "%04d-%02d-%02d", year, month + 1, dayOfMonth);
            // Guard: ensure user cannot pick a past date (DatePicker minDate already set, but double-check)
            goalDeadlineInput.setText(coerceFutureISO(formattedDate));
        },
                calendar.get(Calendar.YEAR),
                calendar.get(Calendar.MONTH),
                calendar.get(Calendar.DAY_OF_MONTH));
        dialog.getDatePicker().setMinDate(System.currentTimeMillis());
        dialog.show();
    }

    // ---------------- UI Helpers ----------------
    private void addTaskField(@Nullable String prefillText) {
        EditText taskInput = new EditText(this);
        taskInput.setHint("Add tasks for this goal");
        taskInput.setBackgroundResource(R.drawable.rounded_edittext);
        taskInput.setPadding(24, 24, 24, 24);
        taskInput.setTextColor(ContextCompat.getColor(this, android.R.color.black));
        taskInput.setHintTextColor(ContextCompat.getColor(this, R.color.gray));

        if (!TextUtils.isEmpty(prefillText)) {
            taskInput.setText(prefillText);
        }

        LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(
                LinearLayout.LayoutParams.MATCH_PARENT,
                LinearLayout.LayoutParams.WRAP_CONTENT
        );
        params.setMargins(0, 16, 0, 0);
        taskInput.setLayoutParams(params);
        taskInputContainer.addView(taskInput);
    }

    private void clearAllTaskFields() {
        taskInputContainer.removeAllViews();
    }

    private List<String> collectCurrentTaskTexts() {
        List<String> tasks = new ArrayList<>();
        for (int i = 0; i < taskInputContainer.getChildCount(); i++) {
            View child = taskInputContainer.getChildAt(i);
            if (child instanceof EditText) {
                String t = ((EditText) child).getText().toString().trim();
                if (!t.isEmpty()) tasks.add(t);
            }
        }
        return tasks;
    }

    private void setLoading(boolean isLoading) {
        aiLoadingRow.setVisibility(isLoading ? View.VISIBLE : View.GONE);
        btnDevisePlan.setEnabled(!isLoading);
        btnApplyAdjustment.setEnabled(!isLoading);
        btnCreateGoal.setEnabled(!isLoading);
        addTaskButton.setEnabled(!isLoading);
    }

    private void revealAdjustPanel() {
        if (aiAdjustRow.getVisibility() != View.VISIBLE) {
            aiAdjustRow.setVisibility(View.VISIBLE);
        }
    }

    // ---------------- AI: Devise Plan ----------------
    private void handleDevisePlan() {
        String idea = aiIdeaInput.getText().toString().trim();
        if (idea.isEmpty()) {
            Toast.makeText(this, "Please tell me your goal first.", Toast.LENGTH_SHORT).show();
            return;
        }

        setLoading(true);

        // Build request body
        JSONObject body = new JSONObject();
        try {
            body.put("idea", idea);
            body.put("maxTasks", 7);
            body.put("locale", Locale.getDefault().toString());
        } catch (JSONException e) {
            // Should never happen
        }

        networkExecutor.execute(() -> {
            try {
                JSONObject response = postJson(URL_DEVISE, body);
                runOnUiThread(() -> {
                    setLoading(false);
                    if (response == null) {
                        Toast.makeText(this, "Couldn't generate a plan. Try again.", Toast.LENGTH_SHORT).show();
                        return;
                    }
                    applyDeviseResponse(response);
                    revealAdjustPanel();
                });
            } catch (Exception e) {
                runOnUiThread(() -> {
                    setLoading(false);
                    Toast.makeText(this, "Error generating plan.", Toast.LENGTH_SHORT).show();
                });
            }
        });
    }

    private void applyDeviseResponse(JSONObject resp) {
        // Expected JSON:
        // { "title": "...", "deadline": "YYYY-MM-DD", "tasks": ["t1","t2",...]}
        String title = resp.optString("title", null);
        String deadline = resp.optString("deadline", null);
        JSONArray tasks = resp.optJSONArray("tasks");

        if (!TextUtils.isEmpty(title)) {
            goalTitleInput.setText(title);
        }

        if (!TextUtils.isEmpty(deadline)) {
            goalDeadlineInput.setText(coerceFutureISO(deadline));
        }

        if (tasks != null && tasks.length() > 0) {
            // Replace existing list with the new AI plan
            clearAllTaskFields();
            int count = Math.min(tasks.length(), 7);
            for (int i = 0; i < count; i++) {
                String t = tasks.optString(i, null);
                if (!TextUtils.isEmpty(t)) {
                    addTaskField(t);
                }
            }
        } else {
            Toast.makeText(this, "No tasks returned. You can add your own.", Toast.LENGTH_SHORT).show();
        }
    }

    // ---------------- AI: Adjust Plan ----------------
    private void handleApplyAdjustment() {
        String adjust = aiAdjustInput.getText().toString().trim();
        if (adjust.isEmpty()) {
            Toast.makeText(this, "Tell me how to adjust (e.g., add 3 beginner tasks).", Toast.LENGTH_SHORT).show();
            return;
        }

        setLoading(true);

        // Build context payload
        JSONObject body = new JSONObject();
        try {
            body.put("adjust", adjust);

            JSONObject current = new JSONObject();
            current.put("title", goalTitleInput.getText().toString().trim());
            current.put("deadline", goalDeadlineInput.getText().toString().trim());

            JSONArray currentTasks = new JSONArray();
            for (String t : collectCurrentTaskTexts()) {
                currentTasks.put(t);
            }
            current.put("tasks", currentTasks);

            body.put("currentPlan", current);

        } catch (JSONException e) {
            // ignore
        }

        networkExecutor.execute(() -> {
            try {
                JSONObject response = postJson(URL_ADJUST, body);
                runOnUiThread(() -> {
                    setLoading(false);
                    if (response == null) {
                        Toast.makeText(this, "Couldn’t suggest changes. Try again.", Toast.LENGTH_SHORT).show();
                        return;
                    }
                    applyAdjustResponse(response);
                });
            } catch (Exception e) {
                runOnUiThread(() -> {
                    setLoading(false);
                    Toast.makeText(this, "Error applying adjustment.", Toast.LENGTH_SHORT).show();
                });
            }
        });
    }

    private void applyAdjustResponse(JSONObject resp) {
        // Expected flexible JSON, e.g.:
        // { "addTasks": ["...", "..."], "title": "optional", "deadline": "optional" }
        JSONArray addTasks = resp.optJSONArray("addTasks");
        String newTitle = resp.optString("title", null);
        String newDeadline = resp.optString("deadline", null);

        // Do NOT overwrite title/deadline unprompted. Only set if field empty.
        if (!TextUtils.isEmpty(newTitle) && TextUtils.isEmpty(goalTitleInput.getText().toString().trim())) {
            goalTitleInput.setText(newTitle);
        }
        if (!TextUtils.isEmpty(newDeadline) && TextUtils.isEmpty(goalDeadlineInput.getText().toString().trim())) {
            goalDeadlineInput.setText(coerceFutureISO(newDeadline));
        }

        if (addTasks != null && addTasks.length() > 0) {
            // Append tasks
            int added = 0;
            for (int i = 0; i < addTasks.length(); i++) {
                String t = addTasks.optString(i, null);
                if (!TextUtils.isEmpty(t)) {
                    addTaskField(t);
                    added++;
                }
            }
            Toast.makeText(this, "Added " + added + " suggested task(s).", Toast.LENGTH_SHORT).show();
        } else {
            Toast.makeText(this, "No new tasks suggested.", Toast.LENGTH_SHORT).show();
        }
    }

    // ---------------- Create Goal (save to Firebase) ----------------
    private void createGoal() {
        String title = goalTitleInput.getText().toString().trim();
        String deadline = coerceFutureISO(goalDeadlineInput.getText().toString().trim());

        if (title.isEmpty() || deadline.isEmpty()) {
            Toast.makeText(this, "Please enter a title and deadline.", Toast.LENGTH_SHORT).show();
            return;
        }

        Map<String, Task> tasksMap = new HashMap<>();
        int taskCount = 0;

        for (int i = 0; i < taskInputContainer.getChildCount(); i++) {
            View child = taskInputContainer.getChildAt(i);
            if (child instanceof EditText) {
                String taskTitle = ((EditText) child).getText().toString().trim();
                if (!TextUtils.isEmpty(taskTitle)) {
                    String taskId = FirebaseDatabase.getInstance().getReference().push().getKey();
                    tasksMap.put(taskId, new Task(taskTitle, false));
                    taskCount++;
                }
            }
        }

        if (taskCount == 0) {
            Toast.makeText(this, "Please add at least one task.", Toast.LENGTH_SHORT).show();
            return;
        }

        FirebaseUser currentUser = FirebaseAuth.getInstance().getCurrentUser();
        if (currentUser == null) {
            Toast.makeText(this, "You must be signed in.", Toast.LENGTH_SHORT).show();
            return;
        }
        String userId = currentUser.getUid();

        String goalId = FirebaseDatabase.getInstance().getReference("Goals").push().getKey();
        if (goalId == null) {
            Toast.makeText(this, "Error creating goal ID. Please try again.", Toast.LENGTH_SHORT).show();
            return;
        }

        Goal goal = new Goal(goalId, userId, title, deadline, null, null);
        goal.setTasks(tasksMap); // titleSearch set via setTitle in model

        FirebaseDatabase.getInstance().getReference("Goals")
                .child(userId)
                .child(goalId)
                .setValue(goal)
                .addOnSuccessListener(unused -> {
                    Toast.makeText(CreateGoalActivity.this, "Goal created successfully!", Toast.LENGTH_SHORT).show();
                    finish();
                })
                .addOnFailureListener(e -> {
                    Toast.makeText(CreateGoalActivity.this, "Failed to create goal.", Toast.LENGTH_SHORT).show();
                });
    }

    // ---------------- Simple HTTP Helper (HttpURLConnection) ----------------
    private @Nullable JSONObject postJson(String urlString, JSONObject body) {
        HttpURLConnection conn = null;
        try {
            URL url = new URL(urlString);
            conn = (HttpURLConnection) url.openConnection();

            conn.setConnectTimeout(15000);
            conn.setReadTimeout(30000);
            conn.setRequestMethod("POST");
            conn.setDoOutput(true);
            conn.setDoInput(true);

            conn.setRequestProperty("Content-Type", "application/json; charset=utf-8");
            conn.setRequestProperty("Accept", "application/json");
            conn.setRequestProperty("X-Client", "Android");
            // TODO: attach Firebase ID token for auth/rate limiting if you secure the endpoint.

            // Write body
            byte[] out = body.toString().getBytes(StandardCharsets.UTF_8);
            OutputStream os = conn.getOutputStream();
            os.write(out);
            os.flush();
            os.close();

            int code = conn.getResponseCode();
            BufferedReader br = new BufferedReader(new InputStreamReader(
                    (code >= 200 && code < 300) ? conn.getInputStream() : conn.getErrorStream(),
                    StandardCharsets.UTF_8
            ));
            StringBuilder sb = new StringBuilder();
            String line;
            while ((line = br.readLine()) != null) sb.append(line);
            br.close();

            String payload = sb.toString();
            if (code >= 200 && code < 300) {
                if (payload.isEmpty()) return null;
                try {
                    return new JSONObject(payload);
                } catch (Exception je) {
                    Log.e(TAG, "Invalid JSON from server: " + payload, je);
                    return null;
                }
            } else {
                // Log the server error body so you can see it in Logcat
                Log.e(TAG, "HTTP " + code + " calling " + urlString + " -> " + payload);
                return null;
            }
        } catch (Exception e) {
            Log.e(TAG, "postJson error to " + urlString, e);
            return null;
        } finally {
            if (conn != null) conn.disconnect();
        }
    }

    // ---------------- Date helpers (client-side guard) ----------------
    private String coerceFutureISO(String maybeIso) {
        // Accept only yyyy-MM-dd; if invalid or past, return today + 28 days.
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd", Locale.getDefault());
        sdf.setLenient(false);

        Calendar today = Calendar.getInstance();
        zeroTime(today);

        Date parsed = null;
        if (!TextUtils.isEmpty(maybeIso)) {
            try {
                parsed = sdf.parse(maybeIso);
            } catch (ParseException ignored) {
            }
        }

        if (parsed == null) {
            Calendar fallback = Calendar.getInstance();
            fallback.add(Calendar.DAY_OF_YEAR, 28);
            zeroTime(fallback);
            return sdf.format(fallback.getTime());
        }

        Calendar picked = Calendar.getInstance();
        picked.setTime(parsed);
        zeroTime(picked);

        if (picked.before(today)) {
            Calendar fallback = Calendar.getInstance();
            fallback.add(Calendar.DAY_OF_YEAR, 28);
            zeroTime(fallback);
            return sdf.format(fallback.getTime());
        }
        return sdf.format(picked.getTime());
    }

    private void zeroTime(Calendar c) {
        c.set(Calendar.HOUR_OF_DAY, 0);
        c.set(Calendar.MINUTE, 0);
        c.set(Calendar.SECOND, 0);
        c.set(Calendar.MILLISECOND, 0);
    }
}
